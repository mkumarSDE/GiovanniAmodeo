---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Video Management">
  <div class="min-h-screen bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="bg-white rounded-lg shadow-lg p-6">
        <div class="flex justify-between items-center mb-8">
          <div>
            <h1 class="text-3xl font-bold text-gray-900">Video Management</h1>
            <p class="text-gray-600 mt-2">Manage your video content and metadata</p>
          </div>
          <button 
            id="addVideoBtn"
            class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors font-medium flex items-center space-x-2"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            <span>Add Video</span>
          </button>
        </div>

        <!-- Search and Filters -->
        <div class="mb-6 flex flex-col sm:flex-row gap-4">
          <div class="flex-1">
            <input 
              type="text" 
              id="searchInput"
              placeholder="Search videos..." 
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <select id="filterTopic" class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="">All Topics</option>
          </select>
          <select id="filterSector" class="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="">All Sectors</option>
          </select>
        </div>

        <!-- Videos Table -->
        <div class="overflow-x-auto">
          <table class="min-w-full bg-white border border-gray-200 rounded-lg">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Video</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Topic</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sector</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Views</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody id="videosTableBody" class="bg-white divide-y divide-gray-200">
              <!-- Videos will be loaded here -->
            </tbody>
          </table>
        </div>

        <!-- Loading State -->
        <div id="loadingState" class="hidden text-center py-8">
          <div class="inline-flex items-center space-x-2">
            <svg class="animate-spin h-5 w-5 text-blue-600" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span class="text-gray-600">Loading videos...</span>
          </div>
        </div>

        <!-- Empty State -->
        <div id="emptyState" class="hidden text-center py-8">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
          </svg>
          <h3 class="mt-2 text-sm font-medium text-gray-900">No videos found</h3>
          <p class="mt-1 text-sm text-gray-500">Get started by adding your first video.</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Video Modal -->
  <div id="videoModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
    <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
      <div class="p-6">
        <div class="flex justify-between items-center mb-6">
          <h2 id="modalTitle" class="text-2xl font-bold text-gray-900">Add Video</h2>
          <button id="closeModal" class="text-gray-400 hover:text-gray-600 transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <form id="videoForm" class="space-y-4">
          <input type="hidden" id="videoId" />
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="videoTitle" class="block text-sm font-medium text-gray-700 mb-1">Video Title</label>
              <input type="text" id="videoTitle" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            
            <div>
              <label for="videoId" class="block text-sm font-medium text-gray-700 mb-1">Video ID</label>
              <input type="text" id="videoIdInput" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="topic" class="block text-sm font-medium text-gray-700 mb-1">Topic</label>
              <input type="text" id="topic" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            
            <div>
              <label for="sector" class="block text-sm font-medium text-gray-700 mb-1">Sector</label>
              <input type="text" id="sector" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="geography" class="block text-sm font-medium text-gray-700 mb-1">Geography</label>
              <input type="text" id="geography" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            
            <div>
              <label for="speakerType" class="block text-sm font-medium text-gray-700 mb-1">Speaker Type</label>
              <input type="text" id="speakerType" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="companyName" class="block text-sm font-medium text-gray-700 mb-1">Company Name</label>
              <input type="text" id="companyName" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            
            <div>
              <label for="companySize" class="block text-sm font-medium text-gray-700 mb-1">Company Size</label>
              <input type="text" id="companySize" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
          </div>

          <div>
            <label for="insightsLink" class="block text-sm font-medium text-gray-700 mb-1">Insights Link</label>
            <input type="url" id="insightsLink" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
          </div>

          <div>
            <label for="subtitleFile" class="block text-sm font-medium text-gray-700 mb-1">Subtitle File</label>
            <input type="text" id="subtitleFile" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
          </div>

          <div class="flex justify-end space-x-3 pt-4">
            <button type="button" id="cancelBtn" class="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors">
              Cancel
            </button>
            <button type="submit" id="saveBtn" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors">
              Save Video
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="deleteModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full p-6">
      <div class="text-center">
        <svg class="mx-auto h-12 w-12 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
        </svg>
        <h3 class="mt-4 text-lg font-medium text-gray-900">Delete Video</h3>
        <p class="mt-2 text-sm text-gray-500">Are you sure you want to delete this video? This action cannot be undone.</p>
        <div class="mt-6 flex justify-center space-x-3">
          <button id="cancelDelete" class="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors">
            Cancel
          </button>
          <button id="confirmDelete" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md transition-colors">
            Delete
          </button>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  let videos = [];
  let filteredVideos = [];
  let currentVideoId = null;

  // Check authentication
  document.addEventListener('DOMContentLoaded', function() {
    const isAuthenticated = localStorage.getItem('adminAuthenticated');
    if (!isAuthenticated) {
      window.location.href = '/';
      return;
    }
    
    loadVideos();
    setupEventListeners();
  });

  function setupEventListeners() {
    // Add video button
    document.getElementById('addVideoBtn').addEventListener('click', () => {
      openModal();
    });

    // Close modal
    document.getElementById('closeModal').addEventListener('click', closeModal);
    document.getElementById('cancelBtn').addEventListener('click', closeModal);

    // Form submission
    document.getElementById('videoForm').addEventListener('submit', handleSaveVideo);

    // Search and filters
    document.getElementById('searchInput').addEventListener('input', filterVideos);
    document.getElementById('filterTopic').addEventListener('change', filterVideos);
    document.getElementById('filterSector').addEventListener('change', filterVideos);

    // Delete modal
    document.getElementById('cancelDelete').addEventListener('click', closeDeleteModal);
    document.getElementById('confirmDelete').addEventListener('click', handleDeleteVideo);

    // Event delegation for edit and delete buttons
    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('edit-video-btn')) {
        const videoId = e.target.getAttribute('data-video-id');
        console.log('Edit button clicked for video:', videoId);
        if (videoId) {
          editVideo(videoId);
        }
      }
      
      if (e.target.classList.contains('delete-video-btn')) {
        const videoId = e.target.getAttribute('data-video-id');
        console.log('Delete button clicked for video:', videoId);
        if (videoId) {
          deleteVideo(videoId);
        }
      }
    });
  }

  async function loadVideos() {
    showLoading(true);
    try {
      const response = await fetch('/api/videos');
      videos = await response.json();
      filteredVideos = [...videos];
      renderVideos();
      populateFilters();
    } catch (error) {
      console.error('Error loading videos:', error);
      showError('Failed to load videos');
    } finally {
      showLoading(false);
    }
  }

  function renderVideos() {
    const tbody = document.getElementById('videosTableBody');
    const emptyState = document.getElementById('emptyState');
    
    if (filteredVideos.length === 0) {
      tbody.innerHTML = '';
      emptyState.classList.remove('hidden');
      return;
    }

    emptyState.classList.add('hidden');
    tbody.innerHTML = filteredVideos.map(video => `
      <tr class="hover:bg-gray-50" data-video-id="${video._id}">
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="flex items-center">
            <div class="w-12 h-8 bg-gray-200 rounded flex items-center justify-center">
              <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
            </div>
          </div>
        </td>
        <td class="px-6 py-4">
          <div class="text-sm font-medium text-gray-900">${video.video_title || video.name}</div>
          <div class="text-sm text-gray-500">${video.video_id}</div>
        </td>
        <td class="px-6 py-4 text-sm text-gray-900">${video.topic}</td>
        <td class="px-6 py-4 text-sm text-gray-900">${video.sector}</td>
        <td class="px-6 py-4 text-sm text-gray-900">${video.views || 0}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
          <button class="edit-video-btn text-blue-600 hover:text-blue-900 mr-3" data-video-id="${video._id}">Edit</button>
          <button class="delete-video-btn text-red-600 hover:text-red-900" data-video-id="${video._id}">Delete</button>
        </td>
      </tr>
    `).join('');
  }

  function populateFilters() {
    const topics = [...new Set(videos.map(v => v.topic).filter(Boolean))];
    const sectors = [...new Set(videos.map(v => v.sector).filter(Boolean))];
    
    const topicSelect = document.getElementById('filterTopic');
    const sectorSelect = document.getElementById('filterSector');
    
    topicSelect.innerHTML = '<option value="">All Topics</option>' + topics.map(topic => `<option value="${topic}">${topic}</option>`).join('');
    sectorSelect.innerHTML = '<option value="">All Sectors</option>' + sectors.map(sector => `<option value="${sector}">${sector}</option>`).join('');
  }

  function filterVideos() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const topicFilter = document.getElementById('filterTopic').value;
    const sectorFilter = document.getElementById('filterSector').value;

    filteredVideos = videos.filter(video => {
      const matchesSearch = !searchTerm || 
        video.name.toLowerCase().includes(searchTerm) ||
        video.video_title.toLowerCase().includes(searchTerm) ||
        video.topic.toLowerCase().includes(searchTerm);
      
      const matchesTopic = !topicFilter || video.topic === topicFilter;
      const matchesSector = !sectorFilter || video.sector === sectorFilter;
      
      return matchesSearch && matchesTopic && matchesSector;
    });

    renderVideos();
  }

  function openModal(video = null) {
    const modal = document.getElementById('videoModal');
    const modalTitle = document.getElementById('modalTitle');
    const form = document.getElementById('videoForm');
    
    if (video) {
      modalTitle.textContent = 'Edit Video';
      currentVideoId = video._id;
      populateForm(video);
    } else {
      modalTitle.textContent = 'Add Video';
      currentVideoId = null;
      form.reset();
    }
    
    modal.classList.remove('hidden');
  }

  function closeModal() {
    document.getElementById('videoModal').classList.add('hidden');
    document.getElementById('videoForm').reset();
    currentVideoId = null;
  }

  function populateForm(video) {
    document.getElementById('videoTitle').value = video.video_title || video.name || '';
    document.getElementById('videoIdInput').value = video.video_id || '';
    document.getElementById('topic').value = video.topic || '';
    document.getElementById('sector').value = video.sector || '';
    document.getElementById('geography').value = video.geography || '';
    document.getElementById('speakerType').value = video.speaker_type || '';
    document.getElementById('companyName').value = video.company_name || '';
    document.getElementById('companySize').value = video.company_size || '';
    document.getElementById('insightsLink').value = video.insights_link || '';
    document.getElementById('subtitleFile').value = video.subtitle_file || '';
  }

  async function handleSaveVideo(e) {
    e.preventDefault();
    
    const formData = {
      name: document.getElementById('videoTitle').value,
      video_id: document.getElementById('videoIdInput').value,
      video_title: document.getElementById('videoTitle').value,
      topic: document.getElementById('topic').value,
      sector: document.getElementById('sector').value,
      geography: document.getElementById('geography').value,
      speaker_type: document.getElementById('speakerType').value,
      company_name: document.getElementById('companyName').value,
      company_size: document.getElementById('companySize').value,
      insights_link: document.getElementById('insightsLink').value,
      subtitle_file: document.getElementById('subtitleFile').value,
      views: 0
    };

    try {
      const url = currentVideoId ? `/api/videos/${currentVideoId}` : '/api/videos';
      const method = currentVideoId ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });

      if (response.ok) {
        closeModal();
        loadVideos();
        showSuccess(currentVideoId ? 'Video updated successfully' : 'Video added successfully');
      } else {
        throw new Error('Failed to save video');
      }
    } catch (error) {
      console.error('Error saving video:', error);
      showError('Failed to save video');
    }
  }

  function editVideo(videoId) {
    const video = videos.find(v => v._id === videoId);
    if (video) {
      openModal(video);
    }
  }

  function deleteVideo(videoId) {
    currentVideoId = videoId;
    document.getElementById('deleteModal').classList.remove('hidden');
  }



  function closeDeleteModal() {
    document.getElementById('deleteModal').classList.add('hidden');
    currentVideoId = null;
  }

  async function handleDeleteVideo() {
    try {
      const response = await fetch(`/api/videos/${currentVideoId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        closeDeleteModal();
        loadVideos();
        showSuccess('Video deleted successfully');
      } else {
        throw new Error('Failed to delete video');
      }
    } catch (error) {
      console.error('Error deleting video:', error);
      showError('Failed to delete video');
    }
  }

  function showLoading(show) {
    document.getElementById('loadingState').classList.toggle('hidden', !show);
  }

  function showSuccess(message) {
    // Simple success notification
    alert(message);
  }

  function showError(message) {
    // Simple error notification
    alert('Error: ' + message);
  }
</script> 